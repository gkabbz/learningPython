Using Pandas

Pandas is a useful module for doing data analysis and transformation work. It works by storing data in either a series or a dataframe

Series

1. A series is a one dimensional labelled array (can be accessed via an index) capable of holding any data type.
e.g. In table below is a series, the index is the row columns (0,1,2)
    0   A
    1   B
    2   C
2. If an index is not defined or called, one is created with a value = 0 - len(data)-1. Therefore for most files, you don't necessary need to define an index.
3. If data is stored in a dictionary pandas will automatically convert the keys into an index. (Question: What if you don't want to?)
4. A series is like a dict, you can get and set values by index label
5. You can assign a name attribute to a series (Question: Not sure how a name attribute is useful)


Dataframe

- A dataframe is a 2 dimensional labeled data structure with columns of potentially different types. It's like a spreadsheet or SQL table, or a dict of series objects.
- It is the most commonly used pandas object
- You can optionally pass index(row labels) and columns (column labels) to a dataframe. By doing this however, you are explicitly defining the index and columns of the dataframe.
Therefore a dict of series plus a specific index will discard data not matching up to the passed index.

6. For me - when opening csv's my format will be
data = pd.read_csv('file location', sep='', header=None, names=columnNames, index_col=None, usecols=None, skiprows=None)
ie. 'file location' - what's the file
sep - what's the separator
header - are you defining column labels from the file
names - are you specifying names for the columns (names stored in a list)
index - are you defining row labels
usecols - are you skipping any columns
skiprows - are you skipping any rows

Example:
columnNames = ['browser', 'country', 'date', 'deviceType', 'share']
df = pd.read_csv(tempDailyFile, sep=',', header=None, names=columnNames, index_col=None, usecols=None, skiprows=None)


7. Appending multiple dataframes
Appending one / more dataframes to each other is done using the .append function
e.g. combinedDF = df1.append([df2,df3,df4,df5], ignore_index=True, verify_integrity=False)

ignore_index - True means you dont want the headers of the df you are appending to be included
verify_integrity - If set to true, it will raise ValueError if your new index results in duplicates. I think this is more important when you are using a specific column as the index

8. Functions I find useful
See unique values in a column - df['column'].drop_duplicates()


Write Better Notes for below entries
- if you want to see five rows of the dataframe to get a sense of the structure print(df.head(5))



TODO: learn to view data frame schemas
TODO: learn to append to a dataframe in memory
TODO: learn to